# Multi-stage build for static site generation without Flask
# Stage 1: Get git version
FROM alpine/git:latest AS version
WORKDIR /app
COPY .git .git
RUN git describe --always --tags > /version.txt || echo "unknown" > /version.txt

# Stage 2: Node environment for building assets with esbuild
FROM node:24-alpine AS esbuild-builder

WORKDIR /app

# Copy package files and config from root
COPY package*.json ./
COPY tsconfig.json ./
COPY esbuild.config.js ./
COPY postcss.config.js ./

# Install dependencies
RUN npm ci

# Copy source files
COPY demos-framework/ ./demos-framework/
COPY styles/ ./styles/
COPY demos/ ./demos/

# Build assets with esbuild
RUN npm run build

# Stage 3: Python environment for generating HTML
FROM python:3.12-slim AS builder

WORKDIR /app

# Copy version from first stage
COPY --from=version /version.txt /version/version.txt

# Copy Python requirements and install (temporarily keep all deps for testing)
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code including new generator
COPY generator/ ./generator/
COPY mathnotes/ ./mathnotes/
COPY content/ ./content/
COPY templates/ ./templates/
COPY scripts/build_static_simple.py ./scripts/
COPY favicon.ico robots.txt ./

# Copy built assets from Node stage
COPY --from=esbuild-builder /app/static/dist ./static/dist

# Generate static site using new minimal builder
RUN python scripts/build_static_simple.py --output /static-site

# Stage 4: Production nginx server
FROM nginx:alpine

# Copy static site from builder
COPY --from=builder /static-site /usr/share/nginx/html

# Copy nginx configuration as server block
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost/ || exit 1

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]