{"version":3,"file":"neighborhood-BYrCOWfS.js","sources":["../../demos/topology/neighborhood.ts"],"sourcesContent":["// Neighborhood demo - Interactive visualization for metric spaces\nimport p5 from 'p5';\nimport type { DemoInstance, DemoConfig } from '@framework/types';\n\ninterface Neighborhood {\n  center: p5.Vector;\n  radius: number;\n  innerPoints: { x: number; y: number }[];\n}\n\nexport default function initNeighborhoodDemo(container: HTMLElement, config?: DemoConfig): DemoInstance {\n  let p5Instance: p5 | null = null;\n  let neighborhoods: Neighborhood[] = [];\n  let zoomLevel = 1;\n  let zoomCenter: p5.Vector | null = null;\n  let isZoomed = false;\n  let dragStart: p5.Vector | null = null;\n  let currentDrag: p5.Vector | null = null;\n  let state: 'waiting' | 'dragging_outer' | 'waiting_inner' | 'complete' = 'waiting';\n  const minZoom = 0.5;\n  const maxZoom = 100;\n\n  // Colors\n  let bgColor: p5.Color;\n  let axisColor: p5.Color;\n  let gridColor: p5.Color;\n  let outerColor: p5.Color;\n  let innerColor: p5.Color;\n  let textColor: p5.Color;\n\n  // Create style element for dark mode support\n  const style = document.createElement('style');\n  style.textContent = `\n    #neighborhood-container .demo-button {\n      padding: 5px 10px;\n      margin: 0 5px;\n      cursor: pointer;\n      background-color: #f0f0f0;\n      color: #333;\n      border: 1px solid #ccc;\n      border-radius: 3px;\n    }\n    \n    #neighborhood-container .demo-info {\n      color: #333;\n    }\n    \n    @media (prefers-color-scheme: dark) {\n      #neighborhood-container .demo-button {\n        background-color: #444;\n        color: #e0e0e0;\n        border-color: #666;\n      }\n      \n      #neighborhood-container .demo-button:hover {\n        background-color: #555;\n      }\n      \n      #neighborhood-container .demo-info {\n        color: #e0e0e0;\n      }\n    }\n  `;\n  container.appendChild(style);\n  \n  // Create the HTML structure\n  const neighborhoodContainer = document.createElement('div');\n  neighborhoodContainer.id = 'neighborhood-container';\n  neighborhoodContainer.style.textAlign = 'center';\n  \n  const sketchHolder = document.createElement('div');\n  sketchHolder.id = `neighborhood-sketch-holder-${Date.now()}`;\n  \n  const controls = document.createElement('div');\n  controls.id = 'controls';\n  controls.style.marginTop = '20px';\n  \n  const resetBtn = document.createElement('button');\n  resetBtn.id = `reset-btn-${Date.now()}`;\n  resetBtn.textContent = 'Reset';\n  resetBtn.className = 'demo-button';\n  \n  const zoomToggle = document.createElement('button');\n  zoomToggle.id = `zoom-toggle-${Date.now()}`;\n  zoomToggle.textContent = 'Toggle Zoom';\n  zoomToggle.className = 'demo-button';\n  \n  controls.appendChild(resetBtn);\n  controls.appendChild(zoomToggle);\n  \n  const info = document.createElement('div');\n  info.id = 'info';\n  info.className = 'demo-info';\n  info.style.marginTop = '20px';\n  info.innerHTML = `\n    <h3>Every Neighborhood is Open</h3>\n    <p>This demonstration shows that every neighborhood in a metric space is an open set.</p>\n    <p class=\"instruction\" id=\"instruction-${Date.now()}\">Click and drag to create a neighborhood.</p>\n    <p>A set is <strong>open</strong> if every point in the set is an interior point. A point is an <strong>interior point</strong> if there exists a neighborhood around it that is entirely contained within the set.</p>\n    <p style=\"font-size: 0.9em; opacity: 0.8;\">Use trackpad/mouse wheel to zoom in and out</p>\n  `;\n  \n  neighborhoodContainer.appendChild(sketchHolder);\n  neighborhoodContainer.appendChild(controls);\n  neighborhoodContainer.appendChild(info);\n  container.appendChild(neighborhoodContainer);\n\n  const sketch = (p: p5) => {\n    let canvas: p5.Renderer;\n\n    p.setup = () => {\n      canvas = p.createCanvas(600, 600);\n      canvas.parent(sketchHolder);\n      \n      // Set up colors\n      updateColors();\n      \n      // Add event listeners for buttons\n      resetBtn.addEventListener('click', resetDemo);\n      zoomToggle.addEventListener('click', toggleZoom);\n      \n      p.smooth();\n    };\n\n    function updateColors() {\n      // Check if dark mode\n      const isDark = config?.darkMode ?? (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches);\n      \n      if (isDark) {\n        bgColor = p.color(30, 30, 30);\n        axisColor = p.color(200);\n        gridColor = p.color(60);\n        outerColor = p.color(100, 150, 255, 100);\n        innerColor = p.color(255, 150, 100, 120);\n        textColor = p.color(220);\n      } else {\n        bgColor = p.color(255);\n        axisColor = p.color(50);\n        gridColor = p.color(200);\n        outerColor = p.color(50, 100, 200, 80);\n        innerColor = p.color(200, 100, 50, 100);\n        textColor = p.color(50);\n      }\n    }\n\n    p.draw = () => {\n      p.background(bgColor);\n      \n      p.push();\n      p.translate(p.width/2, p.height/2);\n      \n      if (isZoomed && zoomCenter) {\n        p.scale(zoomLevel);\n        p.translate(-zoomCenter.x, -zoomCenter.y);\n      }\n      \n      // Draw grid\n      drawGrid();\n      \n      // Draw axes\n      drawAxes();\n      \n      // Draw existing neighborhoods\n      for (const n of neighborhoods) {\n        drawNeighborhood(n);\n      }\n      \n      // Draw current drag\n      if (state === 'dragging_outer' && dragStart && currentDrag) {\n        const radius = p.dist(dragStart.x, dragStart.y, currentDrag.x, currentDrag.y);\n        p.fill(outerColor);\n        p.noStroke();\n        p.circle(dragStart.x, dragStart.y, radius * 2);\n        \n        // Draw center point\n        p.fill(axisColor);\n        p.circle(dragStart.x, dragStart.y, 8 / zoomLevel);\n      }\n      \n      p.pop();\n      \n      // Update instruction text\n      updateInstruction();\n    };\n\n    function drawGrid() {\n      p.stroke(gridColor);\n      p.strokeWeight(0.5 / zoomLevel);\n      \n      const gridSize = 50;\n      \n      // Calculate the visible world bounds\n      const viewBounds = {\n        left: -p.width / zoomLevel,\n        right: p.width / zoomLevel,\n        top: -p.height / zoomLevel,\n        bottom: p.height / zoomLevel\n      };\n      \n      if (isZoomed && zoomCenter) {\n        viewBounds.left += zoomCenter.x;\n        viewBounds.right += zoomCenter.x;\n        viewBounds.top += zoomCenter.y;\n        viewBounds.bottom += zoomCenter.y;\n      }\n      \n      // Extend grid lines well beyond the visible area\n      const gridExtent = p.max(p.width, p.height) * 2;\n      \n      // Draw vertical grid lines\n      const startX = Math.floor(viewBounds.left / gridSize) * gridSize;\n      const endX = Math.ceil(viewBounds.right / gridSize) * gridSize;\n      for (let x = startX - gridExtent; x <= endX + gridExtent; x += gridSize) {\n        p.line(x, viewBounds.top - gridExtent, x, viewBounds.bottom + gridExtent);\n      }\n      \n      // Draw horizontal grid lines\n      const startY = Math.floor(viewBounds.top / gridSize) * gridSize;\n      const endY = Math.ceil(viewBounds.bottom / gridSize) * gridSize;\n      for (let y = startY - gridExtent; y <= endY + gridExtent; y += gridSize) {\n        p.line(viewBounds.left - gridExtent, y, viewBounds.right + gridExtent, y);\n      }\n    }\n\n    function drawAxes() {\n      p.stroke(axisColor);\n      p.strokeWeight(2 / zoomLevel);\n      \n      // Calculate the visible world bounds\n      const viewBounds = {\n        left: -p.width / zoomLevel,\n        right: p.width / zoomLevel,\n        top: -p.height / zoomLevel,\n        bottom: p.height / zoomLevel\n      };\n      \n      if (isZoomed && zoomCenter) {\n        viewBounds.left += zoomCenter.x;\n        viewBounds.right += zoomCenter.x;\n        viewBounds.top += zoomCenter.y;\n        viewBounds.bottom += zoomCenter.y;\n      }\n      \n      // Extend axes well beyond the visible area\n      const axisExtent = p.max(p.width, p.height) * 2;\n      \n      // X-axis\n      p.line(viewBounds.left - axisExtent, 0, viewBounds.right + axisExtent, 0);\n      // Y-axis  \n      p.line(0, viewBounds.top - axisExtent, 0, viewBounds.bottom + axisExtent);\n      \n      // Labels (only show when near default view)\n      if (zoomLevel < 2) {\n        p.fill(textColor);\n        p.noStroke();\n        p.textAlign(p.RIGHT, p.TOP);\n        p.text('5', p.width/2 - 10, 10);\n        p.text('-5', -p.width/2 + 30, 10);\n        p.textAlign(p.LEFT, p.BOTTOM);\n        p.text('5', 10, -p.height/2 + 20);\n        p.text('-5', 10, p.height/2 - 10);\n      }\n    }\n\n    function drawNeighborhood(n: Neighborhood) {\n      // Draw outer neighborhood\n      p.fill(outerColor);\n      p.noStroke();\n      p.circle(n.center.x, n.center.y, n.radius * 2);\n      \n      // Draw dashed border for outer neighborhood\n      p.noFill();\n      p.stroke(axisColor);\n      p.strokeWeight(2 / zoomLevel);\n      dashedCircle(n.center.x, n.center.y, n.radius * 2);\n      \n      // Draw center point\n      p.fill(axisColor);\n      p.noStroke();\n      p.circle(n.center.x, n.center.y, 8 / zoomLevel);\n      \n      // Draw inner neighborhoods for each inner point\n      for (const innerPoint of n.innerPoints) {\n        p.fill(innerColor);\n        p.noStroke();\n        \n        // Calculate radius to edge of outer neighborhood\n        const distToCenter = p.dist(n.center.x, n.center.y, innerPoint.x, innerPoint.y);\n        const innerRadius = n.radius - distToCenter;\n        \n        if (innerRadius > 0) {\n          p.circle(innerPoint.x, innerPoint.y, innerRadius * 2);\n          \n          // Draw dashed border for inner neighborhood\n          p.noFill();\n          p.stroke(axisColor);\n          p.strokeWeight(1.5 / zoomLevel);\n          dashedCircle(innerPoint.x, innerPoint.y, innerRadius * 2);\n          \n          // Draw inner point\n          p.fill(axisColor);\n          p.noStroke();\n          p.circle(innerPoint.x, innerPoint.y, 6 / zoomLevel);\n        }\n      }\n    }\n\n    function dashedCircle(x: number, y: number, diameter: number) {\n      const radius = diameter / 2;\n      \n      // Calculate visual radius (how big it appears on screen)\n      const visualRadius = radius * zoomLevel;\n      const visualCircumference = p.TWO_PI * visualRadius;\n      \n      // Fixed visual dash and gap size in pixels\n      const visualDashLength = 8;\n      const visualGapLength = 6;\n      const visualTotalLength = visualDashLength + visualGapLength;\n      \n      // Calculate how many dashes we need\n      const numDashes = Math.floor(visualCircumference / visualTotalLength);\n      \n      // Calculate actual dash length in world coordinates\n      const dashAngle = (visualDashLength / visualRadius);\n      const gapAngle = (visualGapLength / visualRadius);\n      const totalAngle = dashAngle + gapAngle;\n      \n      for (let i = 0; i < numDashes; i++) {\n        const startAngle = i * totalAngle;\n        const endAngle = startAngle + dashAngle;\n        \n        const x1 = x + radius * p.cos(startAngle);\n        const y1 = y + radius * p.sin(startAngle);\n        const x2 = x + radius * p.cos(endAngle);\n        const y2 = y + radius * p.sin(endAngle);\n        \n        p.line(x1, y1, x2, y2);\n      }\n    }\n\n    p.mousePressed = () => {\n      if (p.mouseX < 0 || p.mouseX > p.width || p.mouseY < 0 || p.mouseY > p.height) return;\n      \n      const worldPos = screenToWorld(p.mouseX, p.mouseY);\n      \n      if (state === 'waiting') {\n        dragStart = worldPos;\n        state = 'dragging_outer';\n      } else if (state === 'waiting_inner' || state === 'complete') {\n        // Check if click is inside the original neighborhood\n        const outerN = neighborhoods[neighborhoods.length - 1];\n        const d = p.dist(worldPos.x, worldPos.y, outerN.center.x, outerN.center.y);\n        \n        if (d < outerN.radius) {\n          // Store a copy of the position to avoid reference issues\n          outerN.innerPoints.push({x: worldPos.x, y: worldPos.y});\n          state = 'complete';\n        }\n      }\n    };\n\n    p.mouseDragged = () => {\n      if (state === 'dragging_outer' && dragStart) {\n        currentDrag = screenToWorld(p.mouseX, p.mouseY);\n      }\n    };\n\n    p.mouseReleased = () => {\n      if (state === 'dragging_outer' && dragStart && currentDrag) {\n        const radius = p.dist(dragStart.x, dragStart.y, currentDrag.x, currentDrag.y);\n        \n        if (radius > 10) { // Minimum radius\n          neighborhoods.push({\n            center: p.createVector(dragStart.x, dragStart.y),\n            radius: radius,\n            innerPoints: []\n          });\n          state = 'waiting_inner';\n        } else {\n          state = 'waiting';\n        }\n        \n        dragStart = null;\n        currentDrag = null;\n      }\n    };\n\n    function screenToWorld(x: number, y: number): p5.Vector {\n      let wx = x - p.width/2;\n      let wy = y - p.height/2;\n      \n      if (isZoomed && zoomCenter) {\n        wx = wx / zoomLevel + zoomCenter.x;\n        wy = wy / zoomLevel + zoomCenter.y;\n      }\n      \n      return p.createVector(wx, wy);\n    }\n\n    function resetDemo() {\n      neighborhoods = [];\n      state = 'waiting';\n      isZoomed = false;\n      zoomLevel = 1;\n      zoomCenter = null;\n      dragStart = null;\n      currentDrag = null;\n    }\n\n    function toggleZoom() {\n      if (neighborhoods.length > 0 && neighborhoods[neighborhoods.length - 1].innerPoints.length > 0) {\n        if (Math.abs(zoomLevel - 1) < 0.1) {\n          // Only use button zoom if we're at default zoom\n          const lastInnerPoint = neighborhoods[neighborhoods.length - 1].innerPoints[neighborhoods[neighborhoods.length - 1].innerPoints.length - 1];\n          zoomCenter = p.createVector(lastInnerPoint.x, lastInnerPoint.y);\n          zoomLevel = 3;\n          isZoomed = true;\n        } else {\n          // Reset zoom completely\n          zoomLevel = 1;\n          isZoomed = false;\n          zoomCenter = null;\n        }\n      }\n    }\n\n    function updateInstruction() {\n      const instruction = info.querySelector('.instruction');\n      if (!instruction) return;\n      \n      switch(state) {\n        case 'waiting':\n          instruction.textContent = 'Click and drag to create a neighborhood.';\n          break;\n        case 'dragging_outer':\n          instruction.textContent = 'Release to set the neighborhood radius.';\n          break;\n        case 'waiting_inner':\n          instruction.textContent = 'Click inside the neighborhood to show it contains interior points.';\n          break;\n        case 'complete':\n          instruction.textContent = 'Click more points inside the neighborhood to show they are all interior points. Every point in a neighborhood is interior, so neighborhoods are open!';\n          break;\n      }\n    }\n\n    // Listen for color scheme changes\n    if (window.matchMedia) {\n      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {\n        config = { ...config, darkMode: e.matches };\n        updateColors();\n      });\n    }\n\n    // Handle wheel events for zooming\n    p.mouseWheel = (event: any) => {\n      // Only handle scroll if mouse is over the canvas\n      if (p.mouseX < 0 || p.mouseX > p.width || p.mouseY < 0 || p.mouseY > p.height) {\n        return; // Let the page scroll normally\n      }\n      \n      // Prevent default scrolling\n      event.preventDefault();\n      \n      // Get mouse position in world coordinates before zoom\n      const mouseWorldBefore = screenToWorld(p.mouseX, p.mouseY);\n      \n      // Calculate zoom change (positive delta = zoom out, negative = zoom in)\n      const zoomDelta = event.delta * 0.01;\n      const newZoom = p.constrain(zoomLevel * (1 + zoomDelta), minZoom, maxZoom);\n      \n      if (newZoom !== zoomLevel) {\n        const oldZoom = zoomLevel;\n        zoomLevel = newZoom;\n        \n        // Adjust zoom center to keep mouse position fixed\n        if (zoomLevel !== 1) {\n          if (!isZoomed) {\n            // First time zooming - use (0,0) as initial center\n            zoomCenter = p.createVector(0, 0);\n            isZoomed = true;\n          }\n          // Always adjust zoom center to keep point under mouse stationary\n          const zoomRatio = zoomLevel / oldZoom;\n          zoomCenter!.x = mouseWorldBefore.x - (mouseWorldBefore.x - zoomCenter!.x) / zoomRatio;\n          zoomCenter!.y = mouseWorldBefore.y - (mouseWorldBefore.y - zoomCenter!.y) / zoomRatio;\n        } else {\n          // Reset zoom\n          isZoomed = false;\n          zoomCenter = null;\n        }\n      }\n      \n      return false; // Prevent page scroll\n    };\n  };\n\n  // Initialize p5 instance\n  p5Instance = new p5(sketch);\n\n  return {\n    cleanup: () => {\n      if (p5Instance) {\n        p5Instance.remove();\n        p5Instance = null;\n      }\n      container.innerHTML = '';\n    },\n    \n    resize: () => {\n      // Canvas is fixed size in this demo\n    }\n  };\n}"],"names":["initNeighborhoodDemo","container","config","p5Instance","neighborhoods","zoomLevel","zoomCenter","isZoomed","dragStart","currentDrag","state","minZoom","maxZoom","bgColor","axisColor","gridColor","outerColor","innerColor","textColor","style","neighborhoodContainer","sketchHolder","controls","resetBtn","zoomToggle","info","sketch","p","canvas","updateColors","resetDemo","toggleZoom","drawGrid","drawAxes","n","drawNeighborhood","radius","updateInstruction","gridSize","viewBounds","gridExtent","startX","endX","x","startY","endY","y","axisExtent","dashedCircle","innerPoint","distToCenter","innerRadius","diameter","visualRadius","visualCircumference","visualDashLength","visualGapLength","visualTotalLength","numDashes","dashAngle","gapAngle","totalAngle","i","startAngle","endAngle","x1","y1","x2","y2","worldPos","screenToWorld","outerN","wx","wy","lastInnerPoint","instruction","e","event","mouseWorldBefore","zoomDelta","newZoom","oldZoom","zoomRatio","p5"],"mappings":"0CAUA,SAAwBA,GAAqBC,EAAwBC,EAAmC,CACtG,IAAIC,EAAwB,KACxBC,EAAgC,CAAA,EAChCC,EAAY,EACZC,EAA+B,KAC/BC,EAAW,GACXC,EAA8B,KAC9BC,EAAgC,KAChCC,EAAqE,UACzE,MAAMC,EAAU,GACVC,EAAU,IAGhB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,MAAMC,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,YAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA+BpBlB,EAAU,YAAYkB,CAAK,EAG3B,MAAMC,EAAwB,SAAS,cAAc,KAAK,EAC1DA,EAAsB,GAAK,yBAC3BA,EAAsB,MAAM,UAAY,SAExC,MAAMC,EAAe,SAAS,cAAc,KAAK,EACjDA,EAAa,GAAK,8BAA8B,KAAK,IAAA,CAAK,GAE1D,MAAMC,EAAW,SAAS,cAAc,KAAK,EAC7CA,EAAS,GAAK,WACdA,EAAS,MAAM,UAAY,OAE3B,MAAMC,EAAW,SAAS,cAAc,QAAQ,EAChDA,EAAS,GAAK,aAAa,KAAK,IAAA,CAAK,GACrCA,EAAS,YAAc,QACvBA,EAAS,UAAY,cAErB,MAAMC,EAAa,SAAS,cAAc,QAAQ,EAClDA,EAAW,GAAK,eAAe,KAAK,IAAA,CAAK,GACzCA,EAAW,YAAc,cACzBA,EAAW,UAAY,cAEvBF,EAAS,YAAYC,CAAQ,EAC7BD,EAAS,YAAYE,CAAU,EAE/B,MAAMC,EAAO,SAAS,cAAc,KAAK,EACzCA,EAAK,GAAK,OACVA,EAAK,UAAY,YACjBA,EAAK,MAAM,UAAY,OACvBA,EAAK,UAAY;AAAA;AAAA;AAAA,6CAG0B,KAAK,KAAK;AAAA;AAAA;AAAA,IAKrDL,EAAsB,YAAYC,CAAY,EAC9CD,EAAsB,YAAYE,CAAQ,EAC1CF,EAAsB,YAAYK,CAAI,EACtCxB,EAAU,YAAYmB,CAAqB,EAE3C,MAAMM,EAAUC,GAAU,CACxB,IAAIC,EAEJD,EAAE,MAAQ,IAAM,CACdC,EAASD,EAAE,aAAa,IAAK,GAAG,EAChCC,EAAO,OAAOP,CAAY,EAG1BQ,EAAA,EAGAN,EAAS,iBAAiB,QAASO,CAAS,EAC5CN,EAAW,iBAAiB,QAASO,CAAU,EAE/CJ,EAAE,OAAA,CACJ,EAEA,SAASE,GAAe,EAEP3B,GAAA,YAAAA,EAAQ,YAAa,OAAO,YAAc,OAAO,WAAW,8BAA8B,EAAE,UAGzGW,EAAUc,EAAE,MAAM,GAAI,GAAI,EAAE,EAC5Bb,EAAYa,EAAE,MAAM,GAAG,EACvBZ,EAAYY,EAAE,MAAM,EAAE,EACtBX,EAAaW,EAAE,MAAM,IAAK,IAAK,IAAK,GAAG,EACvCV,EAAaU,EAAE,MAAM,IAAK,IAAK,IAAK,GAAG,EACvCT,EAAYS,EAAE,MAAM,GAAG,IAEvBd,EAAUc,EAAE,MAAM,GAAG,EACrBb,EAAYa,EAAE,MAAM,EAAE,EACtBZ,EAAYY,EAAE,MAAM,GAAG,EACvBX,EAAaW,EAAE,MAAM,GAAI,IAAK,IAAK,EAAE,EACrCV,EAAaU,EAAE,MAAM,IAAK,IAAK,GAAI,GAAG,EACtCT,EAAYS,EAAE,MAAM,EAAE,EAE1B,CAEAA,EAAE,KAAO,IAAM,CACbA,EAAE,WAAWd,CAAO,EAEpBc,EAAE,KAAA,EACFA,EAAE,UAAUA,EAAE,MAAM,EAAGA,EAAE,OAAO,CAAC,EAE7BpB,GAAYD,IACdqB,EAAE,MAAMtB,CAAS,EACjBsB,EAAE,UAAU,CAACrB,EAAW,EAAG,CAACA,EAAW,CAAC,GAI1C0B,EAAA,EAGAC,EAAA,EAGA,UAAWC,KAAK9B,EACd+B,EAAiBD,CAAC,EAIpB,GAAIxB,IAAU,kBAAoBF,GAAaC,EAAa,CAC1D,MAAM2B,EAAST,EAAE,KAAKnB,EAAU,EAAGA,EAAU,EAAGC,EAAY,EAAGA,EAAY,CAAC,EAC5EkB,EAAE,KAAKX,CAAU,EACjBW,EAAE,SAAA,EACFA,EAAE,OAAOnB,EAAU,EAAGA,EAAU,EAAG4B,EAAS,CAAC,EAG7CT,EAAE,KAAKb,CAAS,EAChBa,EAAE,OAAOnB,EAAU,EAAGA,EAAU,EAAG,EAAIH,CAAS,CAClD,CAEAsB,EAAE,IAAA,EAGFU,EAAA,CACF,EAEA,SAASL,GAAW,CAClBL,EAAE,OAAOZ,CAAS,EAClBY,EAAE,aAAa,GAAMtB,CAAS,EAE9B,MAAMiC,EAAW,GAGXC,EAAa,CACjB,KAAM,CAACZ,EAAE,MAAQtB,EACjB,MAAOsB,EAAE,MAAQtB,EACjB,IAAK,CAACsB,EAAE,OAAStB,EACjB,OAAQsB,EAAE,OAAStB,CAAA,EAGjBE,GAAYD,IACdiC,EAAW,MAAQjC,EAAW,EAC9BiC,EAAW,OAASjC,EAAW,EAC/BiC,EAAW,KAAOjC,EAAW,EAC7BiC,EAAW,QAAUjC,EAAW,GAIlC,MAAMkC,EAAab,EAAE,IAAIA,EAAE,MAAOA,EAAE,MAAM,EAAI,EAGxCc,EAAS,KAAK,MAAMF,EAAW,KAAOD,CAAQ,EAAIA,EAClDI,EAAO,KAAK,KAAKH,EAAW,MAAQD,CAAQ,EAAIA,EACtD,QAASK,EAAIF,EAASD,EAAYG,GAAKD,EAAOF,EAAYG,GAAKL,EAC7DX,EAAE,KAAKgB,EAAGJ,EAAW,IAAMC,EAAYG,EAAGJ,EAAW,OAASC,CAAU,EAI1E,MAAMI,EAAS,KAAK,MAAML,EAAW,IAAMD,CAAQ,EAAIA,EACjDO,EAAO,KAAK,KAAKN,EAAW,OAASD,CAAQ,EAAIA,EACvD,QAASQ,EAAIF,EAASJ,EAAYM,GAAKD,EAAOL,EAAYM,GAAKR,EAC7DX,EAAE,KAAKY,EAAW,KAAOC,EAAYM,EAAGP,EAAW,MAAQC,EAAYM,CAAC,CAE5E,CAEA,SAASb,GAAW,CAClBN,EAAE,OAAOb,CAAS,EAClBa,EAAE,aAAa,EAAItB,CAAS,EAG5B,MAAMkC,EAAa,CACjB,KAAM,CAACZ,EAAE,MAAQtB,EACjB,MAAOsB,EAAE,MAAQtB,EACjB,IAAK,CAACsB,EAAE,OAAStB,EACjB,OAAQsB,EAAE,OAAStB,CAAA,EAGjBE,GAAYD,IACdiC,EAAW,MAAQjC,EAAW,EAC9BiC,EAAW,OAASjC,EAAW,EAC/BiC,EAAW,KAAOjC,EAAW,EAC7BiC,EAAW,QAAUjC,EAAW,GAIlC,MAAMyC,EAAapB,EAAE,IAAIA,EAAE,MAAOA,EAAE,MAAM,EAAI,EAG9CA,EAAE,KAAKY,EAAW,KAAOQ,EAAY,EAAGR,EAAW,MAAQQ,EAAY,CAAC,EAExEpB,EAAE,KAAK,EAAGY,EAAW,IAAMQ,EAAY,EAAGR,EAAW,OAASQ,CAAU,EAGpE1C,EAAY,IACdsB,EAAE,KAAKT,CAAS,EAChBS,EAAE,SAAA,EACFA,EAAE,UAAUA,EAAE,MAAOA,EAAE,GAAG,EAC1BA,EAAE,KAAK,IAAKA,EAAE,MAAM,EAAI,GAAI,EAAE,EAC9BA,EAAE,KAAK,KAAM,CAACA,EAAE,MAAM,EAAI,GAAI,EAAE,EAChCA,EAAE,UAAUA,EAAE,KAAMA,EAAE,MAAM,EAC5BA,EAAE,KAAK,IAAK,GAAI,CAACA,EAAE,OAAO,EAAI,EAAE,EAChCA,EAAE,KAAK,KAAM,GAAIA,EAAE,OAAO,EAAI,EAAE,EAEpC,CAEA,SAASQ,EAAiBD,EAAiB,CAEzCP,EAAE,KAAKX,CAAU,EACjBW,EAAE,SAAA,EACFA,EAAE,OAAOO,EAAE,OAAO,EAAGA,EAAE,OAAO,EAAGA,EAAE,OAAS,CAAC,EAG7CP,EAAE,OAAA,EACFA,EAAE,OAAOb,CAAS,EAClBa,EAAE,aAAa,EAAItB,CAAS,EAC5B2C,EAAad,EAAE,OAAO,EAAGA,EAAE,OAAO,EAAGA,EAAE,OAAS,CAAC,EAGjDP,EAAE,KAAKb,CAAS,EAChBa,EAAE,SAAA,EACFA,EAAE,OAAOO,EAAE,OAAO,EAAGA,EAAE,OAAO,EAAG,EAAI7B,CAAS,EAG9C,UAAW4C,KAAcf,EAAE,YAAa,CACtCP,EAAE,KAAKV,CAAU,EACjBU,EAAE,SAAA,EAGF,MAAMuB,EAAevB,EAAE,KAAKO,EAAE,OAAO,EAAGA,EAAE,OAAO,EAAGe,EAAW,EAAGA,EAAW,CAAC,EACxEE,EAAcjB,EAAE,OAASgB,EAE3BC,EAAc,IAChBxB,EAAE,OAAOsB,EAAW,EAAGA,EAAW,EAAGE,EAAc,CAAC,EAGpDxB,EAAE,OAAA,EACFA,EAAE,OAAOb,CAAS,EAClBa,EAAE,aAAa,IAAMtB,CAAS,EAC9B2C,EAAaC,EAAW,EAAGA,EAAW,EAAGE,EAAc,CAAC,EAGxDxB,EAAE,KAAKb,CAAS,EAChBa,EAAE,SAAA,EACFA,EAAE,OAAOsB,EAAW,EAAGA,EAAW,EAAG,EAAI5C,CAAS,EAEtD,CACF,CAEA,SAAS2C,EAAaL,EAAWG,EAAWM,EAAkB,CAC5D,MAAMhB,EAASgB,EAAW,EAGpBC,EAAejB,EAAS/B,EACxBiD,EAAsB3B,EAAE,OAAS0B,EAGjCE,EAAmB,EACnBC,EAAkB,EAClBC,EAAoBF,EAAmBC,EAGvCE,EAAY,KAAK,MAAMJ,EAAsBG,CAAiB,EAG9DE,EAAaJ,EAAmBF,EAChCO,EAAYJ,EAAkBH,EAC9BQ,EAAaF,EAAYC,EAE/B,QAASE,EAAI,EAAGA,EAAIJ,EAAWI,IAAK,CAClC,MAAMC,EAAaD,EAAID,EACjBG,EAAWD,EAAaJ,EAExBM,EAAKtB,EAAIP,EAAST,EAAE,IAAIoC,CAAU,EAClCG,GAAKpB,EAAIV,EAAST,EAAE,IAAIoC,CAAU,EAClCI,GAAKxB,EAAIP,EAAST,EAAE,IAAIqC,CAAQ,EAChCI,GAAKtB,EAAIV,EAAST,EAAE,IAAIqC,CAAQ,EAEtCrC,EAAE,KAAKsC,EAAIC,GAAIC,GAAIC,EAAE,CACvB,CACF,CAEAzC,EAAE,aAAe,IAAM,CACrB,GAAIA,EAAE,OAAS,GAAKA,EAAE,OAASA,EAAE,OAASA,EAAE,OAAS,GAAKA,EAAE,OAASA,EAAE,OAAQ,OAE/E,MAAM0C,EAAWC,EAAc3C,EAAE,OAAQA,EAAE,MAAM,EAEjD,GAAIjB,IAAU,UACZF,EAAY6D,EACZ3D,EAAQ,yBACCA,IAAU,iBAAmBA,IAAU,WAAY,CAE5D,MAAM6D,EAASnE,EAAcA,EAAc,OAAS,CAAC,EAC3CuB,EAAE,KAAK0C,EAAS,EAAGA,EAAS,EAAGE,EAAO,OAAO,EAAGA,EAAO,OAAO,CAAC,EAEjEA,EAAO,SAEbA,EAAO,YAAY,KAAK,CAAC,EAAGF,EAAS,EAAG,EAAGA,EAAS,EAAE,EACtD3D,EAAQ,WAEZ,CACF,EAEAiB,EAAE,aAAe,IAAM,CACjBjB,IAAU,kBAAoBF,IAChCC,EAAc6D,EAAc3C,EAAE,OAAQA,EAAE,MAAM,EAElD,EAEAA,EAAE,cAAgB,IAAM,CACtB,GAAIjB,IAAU,kBAAoBF,GAAaC,EAAa,CAC1D,MAAM2B,EAAST,EAAE,KAAKnB,EAAU,EAAGA,EAAU,EAAGC,EAAY,EAAGA,EAAY,CAAC,EAExE2B,EAAS,IACXhC,EAAc,KAAK,CACjB,OAAQuB,EAAE,aAAanB,EAAU,EAAGA,EAAU,CAAC,EAC/C,OAAA4B,EACA,YAAa,CAAA,CAAC,CACf,EACD1B,EAAQ,iBAERA,EAAQ,UAGVF,EAAY,KACZC,EAAc,IAChB,CACF,EAEA,SAAS6D,EAAc3B,EAAWG,EAAsB,CACtD,IAAI0B,EAAK7B,EAAIhB,EAAE,MAAM,EACjB8C,EAAK3B,EAAInB,EAAE,OAAO,EAEtB,OAAIpB,GAAYD,IACdkE,EAAKA,EAAKnE,EAAYC,EAAW,EACjCmE,EAAKA,EAAKpE,EAAYC,EAAW,GAG5BqB,EAAE,aAAa6C,EAAIC,CAAE,CAC9B,CAEA,SAAS3C,GAAY,CACnB1B,EAAgB,CAAA,EAChBM,EAAQ,UACRH,EAAW,GACXF,EAAY,EACZC,EAAa,KACbE,EAAY,KACZC,EAAc,IAChB,CAEA,SAASsB,GAAa,CACpB,GAAI3B,EAAc,OAAS,GAAKA,EAAcA,EAAc,OAAS,CAAC,EAAE,YAAY,OAAS,EAC3F,GAAI,KAAK,IAAIC,EAAY,CAAC,EAAI,GAAK,CAEjC,MAAMqE,EAAiBtE,EAAcA,EAAc,OAAS,CAAC,EAAE,YAAYA,EAAcA,EAAc,OAAS,CAAC,EAAE,YAAY,OAAS,CAAC,EACzIE,EAAaqB,EAAE,aAAa+C,EAAe,EAAGA,EAAe,CAAC,EAC9DrE,EAAY,EACZE,EAAW,EACb,MAEEF,EAAY,EACZE,EAAW,GACXD,EAAa,IAGnB,CAEA,SAAS+B,GAAoB,CAC3B,MAAMsC,EAAclD,EAAK,cAAc,cAAc,EACrD,GAAKkD,EAEL,OAAOjE,EAAA,CACL,IAAK,UACHiE,EAAY,YAAc,2CAC1B,MACF,IAAK,iBACHA,EAAY,YAAc,0CAC1B,MACF,IAAK,gBACHA,EAAY,YAAc,qEAC1B,MACF,IAAK,WACHA,EAAY,YAAc,wJAC1B,KAAA,CAEN,CAGI,OAAO,YACT,OAAO,WAAW,8BAA8B,EAAE,iBAAiB,SAAWC,GAAM,CAClF1E,EAAS,CAAE,GAAGA,EAAQ,SAAU0E,EAAE,OAAA,EAClC/C,EAAA,CACF,CAAC,EAIHF,EAAE,WAAckD,GAAe,CAE7B,GAAIlD,EAAE,OAAS,GAAKA,EAAE,OAASA,EAAE,OAASA,EAAE,OAAS,GAAKA,EAAE,OAASA,EAAE,OACrE,OAIFkD,EAAM,eAAA,EAGN,MAAMC,EAAmBR,EAAc3C,EAAE,OAAQA,EAAE,MAAM,EAGnDoD,EAAYF,EAAM,MAAQ,IAC1BG,EAAUrD,EAAE,UAAUtB,GAAa,EAAI0E,GAAYpE,EAASC,CAAO,EAEzE,GAAIoE,IAAY3E,EAAW,CACzB,MAAM4E,EAAU5E,EAIhB,GAHAA,EAAY2E,EAGR3E,IAAc,EAAG,CACdE,IAEHD,EAAaqB,EAAE,aAAa,EAAG,CAAC,EAChCpB,EAAW,IAGb,MAAM2E,EAAY7E,EAAY4E,EAC9B3E,EAAY,EAAIwE,EAAiB,GAAKA,EAAiB,EAAIxE,EAAY,GAAK4E,EAC5E5E,EAAY,EAAIwE,EAAiB,GAAKA,EAAiB,EAAIxE,EAAY,GAAK4E,CAC9E,MAEE3E,EAAW,GACXD,EAAa,IAEjB,CAEA,MAAO,EACT,CACF,EAGA,OAAAH,EAAa,IAAIgF,GAAGzD,CAAM,EAEnB,CACL,QAAS,IAAM,CACTvB,IACFA,EAAW,OAAA,EACXA,EAAa,MAEfF,EAAU,UAAY,EACxB,EAEA,OAAQ,IAAM,CAEd,CAAA,CAEJ"}