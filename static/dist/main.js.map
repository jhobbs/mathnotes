{"version":3,"mappings":"q/BAMMA,EAA0H,CAC9H,iBAAkB,IAAAC,EAAA,IAAM,OAAO,8BAA0B,KAC3D,EAGC,OAAe,aAAeD,EAG/B,SAAS,iBAAiB,mBAAoB,IAAM,CAC3B,SAAS,iBAA8B,4BAA4B,EAE3E,QAAQ,MAAOE,GAAc,CAC1C,MAAMC,EAAWD,EAAU,QAAQ,KACnC,GAAI,CAACC,GAAY,CAACH,EAAaG,CAAQ,EAAG,CACxC,QAAQ,MAAM,SAASA,CAAQ,yBAAyB,EACxD,MACF,CAEA,GAAI,CACF,MAAMC,EAAS,MAAMJ,EAAaG,CAAQ,IACpCE,EAAqB,CACzB,SAAU,SAAS,gBAAgB,UAAU,SAAS,WAAW,EACjE,MAAOH,EAAU,QAAQ,MAAQ,SAASA,EAAU,QAAQ,KAAK,EAAI,OACrE,OAAQA,EAAU,QAAQ,OAAS,SAASA,EAAU,QAAQ,MAAM,EAAI,QAGpEI,EAAWF,EAAO,QAAQF,EAAWG,CAAM,EAGhDH,EAAkB,eAAiBI,EAGpC,OAAO,iBAAiB,eAAgB,IAAM,CAC5CA,EAAS,SACX,CAAC,CACH,OAASC,EAAO,CACd,QAAQ,MAAM,wBAAwBJ,CAAQ,KAAMI,CAAK,CAC3D,CACF,CAAC,CACH,CAAC","names":["demoRegistry","__vitePreload","container","demoName","module","config","instance","error"],"ignoreList":[],"sources":["../../mathnotes/demos/main.ts"],"sourcesContent":["// Main entry point for Vite\n// This file will handle dynamic imports of demo modules\n\nimport type { DemoConfig, DemoInstance } from './types';\n\n// Demo registry - will be populated as demos are converted\nconst demoRegistry: Record<string, () => Promise<{ default: (container: HTMLElement, config?: DemoConfig) => DemoInstance }>> = {\n  'electric-field': () => import('./physics/electric-field')\n};\n\n// Expose registry globally for inline scripts\n(window as any).demoRegistry = demoRegistry;\n\n// Initialize demos on page load\ndocument.addEventListener('DOMContentLoaded', () => {\n  const demoContainers = document.querySelectorAll<HTMLElement>('.demo-component[data-demo]');\n  \n  demoContainers.forEach(async (container) => {\n    const demoName = container.dataset.demo;\n    if (!demoName || !demoRegistry[demoName]) {\n      console.error(`Demo \"${demoName}\" not found in registry`);\n      return;\n    }\n    \n    try {\n      const module = await demoRegistry[demoName]();\n      const config: DemoConfig = {\n        darkMode: document.documentElement.classList.contains('dark-mode'),\n        width: container.dataset.width ? parseInt(container.dataset.width) : undefined,\n        height: container.dataset.height ? parseInt(container.dataset.height) : undefined,\n      };\n      \n      const instance = module.default(container, config);\n      \n      // Store instance for cleanup\n      (container as any).__demoInstance = instance;\n      \n      // Handle cleanup on page unload\n      window.addEventListener('beforeunload', () => {\n        instance.cleanup();\n      });\n    } catch (error) {\n      console.error(`Failed to load demo \"${demoName}\":`, error);\n    }\n  });\n});\n\n// Re-export types for demo modules to use\nexport type { DemoConfig, DemoInstance } from './types';"],"file":"main.js"}