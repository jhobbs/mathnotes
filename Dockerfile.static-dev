# Development static builder - builds at runtime to volume
# Stage 1: Node environment for building Vite assets
FROM node:24-alpine AS vite-builder

WORKDIR /app

# Copy package files and config from root
COPY package*.json ./
COPY tsconfig.json ./
COPY vite.config.ts ./
COPY postcss.config.js ./

# Install dependencies
RUN npm ci

# Copy source files
COPY demos-framework/ ./demos-framework/
COPY styles/ ./styles/
COPY demos/ ./demos/

# Build Vite assets
RUN npm run build

# Stage 2: Python environment for running build at container startup
FROM python:3.12-slim

WORKDIR /app

# Install git for version info
RUN apt-get update && apt-get install -y git && rm -rf /var/lib/apt/lists/*

# Copy Python requirements and install
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY mathnotes/ ./mathnotes/
COPY content/ ./content/
COPY templates/ ./templates/
COPY scripts/build_static.py ./scripts/
COPY favicon.ico robots.txt ./

# Copy Vite build output from the vite-builder stage
COPY --from=vite-builder /app/static/dist ./static/dist

# Copy git for version info
COPY .git/ ./.git/

# Set production environment for static build
ENV FLASK_ENV=production
ENV FLASK_DEBUG=0

# Create a wrapper script that handles the mounted volume issue
RUN echo '#!/bin/sh\n\
mkdir -p /version\n\
git describe --always --tags > /version/version.txt || echo "unknown" > /version/version.txt\n\
# Clear contents of static-build if it exists, but dont remove the directory\n\
if [ -d "static-build" ]; then\n\
    find static-build -mindepth 1 -delete 2>/dev/null || true\n\
fi\n\
# Build to a temp directory first\n\
python scripts/build_static.py -o static-build-temp --no-vite\n\
# Then move contents to the mounted volume\n\
if [ -d "static-build-temp" ]; then\n\
    cp -r static-build-temp/* static-build/ 2>/dev/null || true\n\
    rm -rf static-build-temp\n\
fi\n\
tail -f /dev/null' > /app/build-and-run.sh && chmod +x /app/build-and-run.sh

CMD ["/app/build-and-run.sh"]